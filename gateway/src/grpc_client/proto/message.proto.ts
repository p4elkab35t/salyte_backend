/* eslint-disable */
// @generated by protobuf-ts 2.0.0
// @generated from protobuf file "message.proto" (syntax proto3)
// tslint:disable
// eslint-disable
// @ts-nocheck

import { MessageType, PartialMessage } from "@protobuf-ts/runtime";
import { ServiceType } from "@protobuf-ts/runtime-rpc";

export interface Message {
    id: string;
    chat_id: string;
    sender_id: string;
    content: string;
    created_at: string;
    updated_at: string;
    is_deleted: boolean;
}

export interface SendMessageRequest {
    chat_id: string;
    sender_id: string;
    content: string;
}

export interface SendMessageResponse {
    message?: Message;
    status: number;
}

export interface GetMessageByIDRequest {
    message_id: string;
    user_id: string;
}

export interface GetMessageByIDResponse {
    message?: Message;
    status: number;
}

export interface EditMessageRequest {
    message_id: string;
    user_id: string;
    new_content: string;
}

export interface EditMessageResponse {
    message?: Message;
    status: number;
}

export interface DeleteMessageRequest {
    message_id: string;
    user_id: string;
}

export interface DeleteMessageResponse {
    success: boolean;
}

export interface AddReactionRequest {
    message_id: string;
    user_id: string;
    reaction: string;
}

export interface AddReactionResponse {
    success: boolean;
}

export interface RemoveReactionRequest {
    message_id: string;
    user_id: string;
    reaction: string;
}

export interface RemoveReactionResponse {
    success: boolean;
}

export interface ReadMessageRequest {
    message_id: string;
    user_id: string;
}

export interface ReadMessageResponse {
    success: boolean;
}

export interface MessagingService {
    SendMessage(request: SendMessageRequest): Promise<SendMessageResponse>;
    EditMessage(request: EditMessageRequest): Promise<EditMessageResponse>;
    DeleteMessage(request: DeleteMessageRequest): Promise<DeleteMessageResponse>;
    GetMessageByID(request: GetMessageByIDRequest): Promise<GetMessageByIDResponse>;
    AddReaction(request: AddReactionRequest): Promise<AddReactionResponse>;
    RemoveReaction(request: RemoveReactionRequest): Promise<RemoveReactionResponse>;
    ReadMessage(request: ReadMessageRequest): Promise<ReadMessageResponse>;
}


// export const MessagingService = new ServiceType("message_service.MessagingService", [
//     { name: "SendMessage", I: SendMessageRequest, O: SendMessageResponse },
//     { name: "EditMessage", I: EditMessageRequest, O: EditMessageResponse },
//     { name: "DeleteMessage", I: DeleteMessageRequest, O: DeleteMessageResponse },
//     { name: "GetMessageByID", I: GetMessageByIDRequest, O: GetMessageByIDResponse },
//     { name: "AddReaction", I: AddReactionRequest, O: AddReactionResponse },
//     { name: "RemoveReaction", I: RemoveReactionRequest, O: RemoveReactionResponse },
//     { name: "ReadMessage", I: ReadMessageRequest, O: ReadMessageResponse },
// ]);
