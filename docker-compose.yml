
services:
  # API Gateway (Node.js)
  gateway:
    build:
      context: .
      dockerfile: gateway/dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./gateway:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - auth
      - social
      - message
    networks:
      - salyte

  # Auth Service (Go)
  auth:
    build:
      context: .
      dockerfile: services/auth/dockerfile
    ports:
      - "50051:50051"
    volumes:
      - ./services/auth:/app/services/social
    environment:
      - GO_ENV=development
    depends_on:
      - db
      - social
    networks:
      - salyte

  # Social Service (Go)
  social:
    build:
      context: .
      dockerfile: services/social/dockerfile
    ports:
      - "8081:8081"
    volumes:
      - ./services/social:/app/services/social
    environment:
      - GO_ENV=development
    depends_on:
      - db
    networks:
      - salyte

  # Message Service (Go)
  message:
    build:
      context: .
      dockerfile: services/message/dockerfile
    ports:
      - "8083:8083"
      - "50052:50052"
    volumes:
      - ./services/message:/app/services/social
    environment:
      - GO_ENV=development
    depends_on:
      - db
    networks:
      - salyte

  # Database (Example: PostgreSQL)
  db:
    build:
      context: .
      dockerfile: ./db_sql/dockerfile
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1
    volumes:
      - ./db_sql:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    networks:
      - salyte

# Volumes for persistent data
volumes:
  postgres_data:
  
# Network for communication between services
networks:
  salyte:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: salyte
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"