syntax = "proto3";

package message_service;

option go_package = "github.com/p4elkab35t/salyte_backend/services/message/pkg/proto/message";


/// Message represents a chat message.
message Message {
  string id = 1;
  string chat_id = 2;
  string sender_id = 3;
  string content = 4;
  string created_at = 5;
  string updated_at = 6;
  bool is_deleted = 7;
}

/// Request to send a new message to a chat.
message SendMessageRequest {
    string chat_id = 1;      // Identifier of the chat.
    string sender_id = 2;    // Sender's user ID.
  string content = 3;     // The text content of the message.
}

/// Response for SendMessage RPC.
message SendMessageResponse {
  Message message = 1;    // The message that was created.
  int32 status = 2;       // Status code for the operation.
}

/// Request to edit an existing message.
message EditMessageRequest {
    string message_id = 1;   // ID of the message to edit.
    string user_id = 2;      // User editing the message.
    string new_content = 3; // Updated message content.
}

/// Response for EditMessage RPC.
message EditMessageResponse {
  Message message = 1;    // The updated message.
    int32 status = 2;       // Status code for the operation.
}

/// Request to delete a message.
message DeleteMessageRequest {
    string message_id = 1;   // ID of the message to delete.
    string user_id = 2;      // User deleting the message.
}

/// Response for DeleteMessage RPC.
message DeleteMessageResponse {
  bool success = 1;       // True if deletion was successful.
}

/// Request to add an emoji reaction to a message.
message AddReactionRequest {
    string message_id = 1;   // ID of the target message.
    string user_id = 2;      // User adding the reaction.
    string reaction = 3;    // Emoji code or short name.
}

/// Response for AddReaction RPC.
message AddReactionResponse {
  bool success = 1;       // True if the reaction was added.
}

/// Request to remove an emoji reaction from a message.
message RemoveReactionRequest {
    string message_id = 1;   
    string user_id = 2;
    string reaction = 3;
}

/// Response for RemoveReaction RPC.
message RemoveReactionResponse {
    bool success = 1;
}

/// Request to retrieve new messages for a specific chat.
/// Uses a timestamp to filter out messages already seen.
message RetrieveNewMessagesRequest {
    string chat_id = 1;                        // The chat to fetch messages from.
    string since = 2;      // Fetch messages created after this time.
    string user_id = 3;                        // The user's ID.
}

/// Response for RetrieveNewMessages RPC.
message RetrieveNewMessagesResponse {
  repeated Message messages = 1;            // List of new messages.
  int32 status = 2;                         // Status code for the operation.
}

/// Request to retrieve new messages across all chats for a given user.
message RetrieveAllNewMessagesRequest {
    string user_id = 1;                        // The user's ID.
    string since = 2;      // Only return messages newer than this.
}

/// Response for RetrieveAllNewMessages RPC.
message RetrieveAllNewMessagesResponse {
  repeated Message messages = 1;            // List of new messages.
  int32 status = 2;                         // Status code for the operation.
}

/// MessagingService defines the gRPC API for messaging operations.
service MessagingService {
  // Sends a new message to a chat.
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  
  // Edits an existing message.
  rpc EditMessage(EditMessageRequest) returns (EditMessageResponse);
  
  // Deletes a message.
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
  
  // Adds an emoji reaction to a message.
  rpc AddReaction(AddReactionRequest) returns (AddReactionResponse);

  // Removes an emoji reaction from a message.
  rpc RemoveReaction(RemoveReactionRequest) returns (RemoveReactionResponse);
  
  // Retrieves new messages for a specific chat.
  rpc RetrieveNewMessages(RetrieveNewMessagesRequest) returns (RetrieveNewMessagesResponse);
  
  // Retrieves new messages across all chats for a given user.
  rpc RetrieveAllNewMessages(RetrieveAllNewMessagesRequest) returns (RetrieveAllNewMessagesResponse);
}
